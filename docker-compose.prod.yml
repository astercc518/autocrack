# 生产环境配置文件
version: '3.8'

services:
  # AutoCrack 后端服务
  autocrack-backend:
    build: .
    container_name: autocrack-backend-prod
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://autocrack:secure_password@postgres:5432/autocrack
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-here
      - MAX_THREADS=50
      - RATE_LIMIT_ENABLED=true
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - autocrack-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: autocrack-postgres
    environment:
      - POSTGRES_DB=autocrack
      - POSTGRES_USER=autocrack
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - autocrack-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: autocrack-redis-prod
    environment:
      - REDIS_PASSWORD=redis_secure_password
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - autocrack-network
    command: redis-server --requirepass redis_secure_password --appendonly yes

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: autocrack-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - autocrack-backend
    restart: unless-stopped
    networks:
      - autocrack-network

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: autocrack-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - autocrack-network

  # 日志聚合 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: autocrack-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - autocrack-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  autocrack-network:
    driver: bridge